const fs = require("fs");
const moment = require("moment-timezone");
const axios = require("axios"); module.exports.config = {
  name: "tempbanuser",
  version: "1.0.0",
  hasPermssion: 2,
  credits: "Réynél",
  description: "Temporarily ban a user from the group for a specified duration.",
  commandCategory: "system",
  usages: "[id] [duration: Xs, Xm, Xh, Xd]",
  cooldowns: 5 }; module.exports.run = async function ({ api, args, event }) { const { messageID, threadID, senderID } = event; const info = await api.getThreadInfo(threadID); if (!info.adminIDs.some(item => item.id == api.getCurrentUserID())) return api.sendMessage('❎ | 𝖬𝖺𝗌𝗍𝖾𝗋, 𝖨 𝗁𝖺𝗏𝖾 𝗇𝗈 𝗋𝗂𝗀𝗁𝗍𝗌 𝗍𝗈 𝗉𝖾𝗋𝖿𝗈𝗋𝗆 𝗍𝗁𝖾 𝗍𝖾𝗆𝗉𝖻𝖺𝗇𝗎𝗌𝖾𝗋 𝗂𝗇 𝗍𝗁𝗂𝗌 𝗀𝗋𝗈𝗎𝗉.', threadID, messageID); const fs = require("fs-extra"); if (!fs.existsSync(__dirname + `/cache/tempbans.json`)) { const data = { tempbans: {} }; fs.writeFileSync(__dirname + `/cache/tempbans.json`, JSON.stringify(data)); } const tempbans = JSON.parse(fs.readFileSync(__dirname + `/cache/tempbans.json`)); const userID = args[0]; if (!userID || isNaN(userID)) return api.sendMessage("❎ | 𝖬𝖺𝗌𝗍𝖾𝗋, 𝗉𝗅𝖾𝖺𝗌𝖾 𝗉𝗋𝗈𝗏𝗂𝖽𝖾 𝖺 𝗏𝖺𝗅𝗂𝖽 𝖥𝖺𝖼𝖾𝖻𝗈𝗈𝗄 𝖨𝖣 𝗍𝗈 𝗍𝖾𝗆𝗉𝗈𝗋𝖺𝗋𝗂𝗅𝗒 𝖻𝖺𝗇 𝗍𝗁𝖾 𝗎𝗌𝖾𝗋.", threadID, messageID); if (tempbans.tempbans.hasOwnProperty(threadID) && tempbans.tempbans[threadID][userID]) { return api.sendMessage("🚫 | 𝖲𝖾𝗇𝗌𝖾𝗂, 𝗒𝗈𝗎 𝖺𝗋𝖾 𝗍𝖾𝗆𝗉𝗈𝗋𝖺𝗋𝗂𝗅𝗒 𝖻𝖺𝗇𝗇𝖾𝖽 𝖿𝗋𝗈𝗆 𝗎𝗌𝗂𝗇𝗀 𝗆𝖾. 𝖨𝖿 𝗒𝗈𝗎 𝖻𝖾𝗅𝗂𝖾𝗏𝖾 𝗍𝗁𝗂𝗌 𝗂𝗌 𝖺 𝗆𝗂𝗌𝗍𝖺𝗄𝖾 𝗈𝗋 𝗇𝖾𝖾𝖽 𝖿𝗎𝗋𝗍𝗁𝖾𝗋 𝖺𝗌𝗌𝗂𝗌𝗍𝖺𝗇𝖼𝖾, 𝗉𝗅𝖾𝖺𝗌𝖾 𝖼𝗈𝗇𝗍𝖺𝖼𝗍 𝗆𝗒 𝗆𝖺𝗌𝗍𝖾𝗋.", threadID, messageID); } if (!args[1] || !args[1].match(/^\d+[s,m,h,d]$/)) return api.sendMessage("❎ | 𝖬𝖺𝗌𝗍𝖾𝗋, 𝗍𝗁𝖺𝗍 𝗂𝗌 𝗂𝗇𝗏𝖺𝗅𝗂𝖽 𝖽𝗎𝗋𝖺𝗍𝗂𝗈𝗇. 𝖯𝗅𝖾𝖺𝗌𝖾 𝗎𝗌𝖾 𝖺 𝗏𝖺𝗅𝗂𝖽 𝖿𝗈𝗋𝗆𝖺𝗍: 𝖷𝗌 (𝗌𝖾𝖼𝗈𝗇𝖽𝗌), 𝖷𝗆 (𝗆𝗂𝗇𝗎𝗍𝖾𝗌), 𝖷𝗁 (𝗁𝗈𝗎𝗋𝗌), 𝗈𝗋 𝖷𝖽 (𝖽𝖺𝗒𝗌).", threadID, messageID); const duration = args[1]; const durationValue = parseInt(duration); const durationUnit = duration.charAt(duration.length - 1); const validUnits = ['s', 'm', 'h', 'd']; if (!validUnits.includes(durationUnit) || isNaN(durationValue)) return api.sendMessage("❎ | 𝖬𝖺𝗌𝗍𝖾𝗋, 𝗍𝗁𝖺𝗍 𝗂𝗌 𝗂𝗇𝗏𝖺𝗅𝗂𝖽 𝖽𝗎𝗋𝖺𝗍𝗂𝗈𝗇 𝖿𝗈𝗋𝗆𝖺𝗍. 𝖯𝗅𝖾𝖺𝗌𝖾 𝗎𝗌𝖾 𝖺 𝗏𝖺𝗅𝗂𝖽 𝖿𝗈𝗋𝗆𝖺𝗍: 𝖷𝗌 (𝗌𝖾𝖼𝗈𝗇𝖽𝗌), 𝖷𝗆 (𝗆𝗂𝗇𝗎𝗍𝖾𝗌), 𝖷𝗁 (𝗁𝗈𝗎𝗋𝗌), 𝗈𝗋 𝖷𝖽 (𝖽𝖺𝗒𝗌).", threadID, messageID); const reason = args.slice(2).join(" "); if (!reason) return api.sendMessage("❎ | 𝖬𝖺𝗌𝗍𝖾𝗋 𝗉𝗅𝖾𝖺𝗌𝖾 𝗉𝗋𝗈𝗏𝗂𝖽𝖾 𝖺 𝗋𝖾𝖺𝗌𝗈𝗇 𝖿𝗈𝗋 𝗍𝗁𝖾 𝗍𝖾𝗆𝗉𝗈𝗋𝖺𝗋𝗒 𝖻𝖺𝗇.", threadID, messageID); const timestamp = moment().unix(); const endTime = moment().add(durationValue, durationUnit).unix(); if (!tempbans.tempbans.hasOwnProperty(threadID)) { tempbans.tempbans[threadID] = {}; } tempbans.tempbans[threadID][userID] = { endTime: endTime, reason: reason }; fs.writeFileSync(__dirname + `/cache/tempbans.json`, JSON.stringify(tempbans, null, 2)); api.sendMessage({ body: `🚫 | 𝖬𝖺𝗌𝗍𝖾𝗋, 𝗎𝗌𝖾𝗋 𝗐𝗂𝗍𝗁 𝖨𝖣 ${userID} 𝗁𝖺𝗌 𝖻𝖾𝖾𝗇 𝗍𝖾𝗆𝗉𝗈𝗋𝖺𝗋𝗂𝗅𝗒 𝖻𝖺𝗇𝗇𝖾𝖽 𝖿𝗋𝗈𝗆 𝗍𝗁𝖾 𝗀𝗋𝗈𝗎𝗉 𝖿𝗈𝗋 ${duration}.\n\n𝗥𝗲𝗮𝘀𝗼𝗻: ${reason}`, }, threadID, messageID); setTimeout(() => { if (tempbans.tempbans[threadID][userID] && tempbans.tempbans[threadID][userID].endTime === endTime) { delete tempbans.tempbans[threadID][userID]; fs.writeFileSync(__dirname + `/cache/tempbans.json`, JSON.stringify(tempbans, null, 2)); api.unbanUser(threadID, userID); } }, (endTime - timestamp) * 1000); };