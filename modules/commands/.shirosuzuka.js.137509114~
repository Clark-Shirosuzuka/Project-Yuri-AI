module.exports.config = {
  name: "shirosuzuka",
  version: "1.0.0",
  hasPermission: 0,
  description: "Harold bot that can download facebook videos, sing, search image, search lyrics and more..",
  credits: "Réynél",
  usages: "[help]",
  commandCategory: "ai",
  cooldowns: 10,
};
const axios = require("axios"),
  fs = require("fs"),
  fbvid = __dirname+"/cache/fbvid.mp4",
  fbimg = __dirname+"/cache/fbimg.png",
  fbmp3 = __dirname+'/cache/fbmp3.mp3',
  audio = __dirname+"/cache/audio.mp3",
  tikvid = __dirname+"/cache/tikvid.mp4";
const getFBInfo = require("@xaviabot/fb-downloader");
const usetube = require('usetube');
const ytdl = require('ytdl-core');
const google = require("googlethis");
const cloudscraper = require("cloudscraper");
const cheerio = require("cheerio");
const request = require("request");
module.exports.run = async function ({ api, args, event }){
let txt = args[0] === "ai" ? args.slice(1).join(" ") : args.join(" ");
const { threadID, messageID, body } = event;
  const rand = ["𝖪𝗈𝗇𝗇𝗂𝖼𝗁𝗂𝗐𝖺 𝗌𝖾𝗇𝗌𝖾𝗂 𝗂𝖿 𝗒𝗈𝗎 𝖽𝗈𝗇'𝗍 𝗄𝗇𝗈𝗐 𝗁𝗈𝗐 𝗍𝗈 𝗎𝗌𝖾 𝗆𝖾 𝗃𝗎𝗌𝗍 𝗍𝗒𝗉𝖾 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝗁𝖾𝗅𝗉>","𝖧𝖾𝗒 𝖳𝗁𝖾𝗋𝖾 𝗎𝗌𝖾𝗋 𝖨'𝗆 𝖲𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝖡𝗈𝗍 𝗁𝗈𝗐 𝖼𝖺𝗇 𝖨 𝖺𝗌𝗌𝗂𝗌𝗍 𝗒𝗈𝗎 𝗍𝗈𝖽𝖺𝗒? 😊", "𝖧𝖾𝗅𝗅𝗈 𝗍𝗁𝖾𝗋𝖾 𝗎𝗌𝖾𝗋 𝖼𝖺𝗇 𝖨 𝗌𝗂𝗇𝗀 𝖿𝗈𝗋 𝗒𝗈𝗎? 🥰", "𝖧𝖾𝗅𝗅𝗈 𝖳𝗁𝖾𝗋𝖾 𝗎𝗌𝖾𝗋 𝖽𝗂𝖽 𝗒𝗈𝗎 𝗄𝗇𝗈𝗐 𝗍𝗁𝖺𝗍 𝖨 𝖼𝖺𝗇 𝗌𝗂𝗇𝗀, 𝖽𝗈𝗐𝗇𝗅𝗈𝖺𝖽 𝖿𝖺𝖼𝖾𝖻𝗈𝗈𝗄 𝗏𝗂𝖽𝖾𝗈𝗌, 𝗌𝖾𝖺𝗋𝖼𝗁 𝗂𝗆𝖺𝗀𝖾 𝖺𝗇𝖽 𝗆𝗈𝗋𝖾...", "𝖧𝖾𝗅𝗅𝗈 𝖳𝗁𝖾𝗋𝖾 𝗎𝗌𝖾𝗋 𝖨'𝗆 𝖲𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝖡𝗈𝗍 𝖡𝗒 𝖢𝗅𝖺𝗋𝗄 𝖲𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺."];
  const rand1 = rand[Math.floor(Math.random() * rand.length)];
  if (txt.toLowerCase() == "help"){
    const message = `•——[𝖲𝖧𝖨𝖱𝖮𝖲𝖴𝖹𝖴𝖪𝖠 𝖡𝖮𝖳]——•
𝖳𝖧𝖤𝖲𝖤 𝖠𝖱𝖤 𝖳𝖧𝖤 𝖳𝖧𝖨𝖭𝖦𝖲 𝖨 𝖢𝖠𝖭 𝖣𝖮 𝖠𝖲 𝖠 𝖡𝖮𝖳.

•𝖲𝖧𝖨𝖱𝖮𝖲𝖴𝖹𝖴𝖪𝖠 𝖢𝖠𝖭 𝖲𝖨𝖭𝖦 𝖲𝖮𝖭𝖦𝖲.

𝖩𝗎𝗌𝗍 𝗍𝗒𝗉𝖾 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝖼𝖺𝗇 𝗒𝗈𝗎 𝗌𝗂𝗇𝗀 (𝗍𝗂𝗍𝗅𝖾 𝗈𝖿 𝗌𝗈𝗇𝗀)> 𝗈𝗋 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝗌𝗂𝗇𝗀 (𝗍𝗂𝗍𝗅𝖾 𝗈𝖿 𝗌𝗈𝗇𝗀)> 𝖺𝗌 𝗅𝗈𝗇𝗀 𝖺𝗌 𝗍𝗁𝖾𝗋𝖾 𝗂𝗌 𝗍𝗁𝖾 𝗐𝗈𝗋𝖽 𝗌𝗂𝗇𝗀 𝖺𝗇𝖽 𝗍𝗁𝖾 𝗍𝗂𝗍𝗅𝖾 𝗈𝖿 𝗍𝗁𝖾 𝗌𝗈𝗇𝗀, 𝗂𝗍 𝖼𝖺𝗇 𝖺𝗎𝗍𝗈𝗆𝖺𝗍𝗂𝖼𝖺𝗅𝗅𝗒 𝖽𝖾𝗍𝖾𝖼𝗍 𝗂𝗍


•𝖲𝖧𝖨𝖱𝖮𝖲𝖴𝖹𝖴𝖪𝖠 𝖢𝖠𝖭 𝖣𝖮𝖶𝖭𝖫𝖮𝖠𝖣 𝖥𝖠𝖢𝖤𝖡𝖮𝖮𝖪 𝖵𝖨𝖣𝖤𝖮𝖲.

𝖩𝗎𝗌𝗍 𝗍𝗒𝗉𝖾 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝖼𝖺𝗇 𝗒𝗈𝗎 𝖽𝗈𝗐𝗇𝗅𝗈𝖺𝖽 𝗍𝗁𝗂𝗌 𝖿𝖺𝖼𝖾𝖻𝗈𝗈𝗄 𝗏𝗂𝖽𝖾𝗈 (𝖿𝖻 𝗏𝗂𝖽𝖾𝗈 𝗎𝗋𝗅)> 𝗈𝗋 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝖽𝗈𝗐𝗇𝗅𝗈𝖺𝖽 𝗍𝗁𝗂𝗌 𝖿𝖺𝖼𝖾𝖻𝗈𝗈𝗄 𝗏𝗂𝖽𝖾𝗈 (𝖿𝖻 𝗏𝗂𝖽𝖾𝗈 𝗎𝗋𝗅)> 𝖺𝗌 𝗅𝗈𝗇𝗀 𝖺𝗌 𝗍𝗁𝖾𝗋𝖾 𝗂𝗌 𝗍𝗁𝖾 𝗐𝗈𝗋𝖽 ‘𝖿𝖺𝖼𝖾𝖻𝗈𝗈𝗄 𝗏𝗂𝖽𝖾𝗈’ 𝗈𝗋 ‘𝖽𝗈𝗐𝗇𝗅𝗈𝖺𝖽’ 𝖺𝗇𝖽 𝗍𝗁𝖾 𝖿𝖻 𝗏𝗂𝖽𝖾𝗈 𝗎𝗋𝗅, 𝗂𝗍 𝖼𝖺𝗇 𝖺𝗎𝗍𝗈𝗆𝖺𝗍𝗂𝖼𝖺𝗅𝗅𝗒 𝖽𝖾𝗍𝖾𝖼𝗍 𝗂𝗍.


•𝖲𝖧𝖨𝖱𝖮𝖲𝖴𝖹𝖴𝖪𝖠 𝖢𝖠𝖭 𝖲𝖤𝖠𝖱𝖢𝖧 𝖨𝖬𝖠𝖦𝖤𝖲.

𝖩𝗎𝗌𝗍 𝗍𝗒𝗉𝖾 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝖼𝖺𝗇 𝗒𝗈𝗎 𝗌𝖾𝖺𝗋𝖼𝗁 𝖺𝗇 𝗂𝗆𝖺𝗀𝖾 𝗈𝖿 (𝗒𝗈𝗎𝗋 𝗌𝖾𝖺𝗋𝖼𝗁)> 𝗈𝗋 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝗂𝗆𝖺𝗀𝖾 𝗈𝖿 (𝗒𝗈𝗎𝗋 𝗌𝖾𝖺𝗋𝖼𝗁)> 𝖺𝗌 𝗅𝗈𝗇𝗀 𝖺𝗌 𝗍𝗁𝖾𝗋𝖾 𝗂𝗌 𝗍𝗁𝖾 𝗐𝗈𝗋𝖽 ‘𝗂𝗆𝖺𝗀𝖾’ 𝗈𝗋 ‘𝗂𝗆𝖺𝗀𝖾 𝗈𝖿’ 𝖺𝗇𝖽 𝗒𝗈𝗎𝗋 𝗌𝖾𝖺𝗋𝖼𝗁, 𝗂𝗍 𝖼𝖺𝗇 𝖺𝗎𝗍𝗈𝗆𝖺𝗍𝗂𝖼𝖺𝗅𝗅𝗒 𝖽𝖾𝗍𝖾𝖼𝗍 𝗂𝗍.


•𝖲𝖧𝖨𝖱𝖮𝖲𝖴𝖹𝖴𝖪𝖠 𝖢𝖠𝖭 𝖲𝖤𝖠𝖱𝖢𝖧 𝖵𝖨𝖣𝖤𝖮 𝖥𝖱𝖮𝖬 𝖸𝖮𝖴𝖳𝖴𝖡𝖤.

𝖩𝗎𝗌𝗍 𝗍𝗒𝗉𝖾 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝖼𝖺𝗇 𝗒𝗈𝗎 𝗌𝖾𝗇𝖽 𝖺 𝗏𝗂𝖽𝖾𝗈 𝗈𝖿 (𝗒𝗈𝗎𝗋 𝗌𝖾𝖺𝗋𝖼𝗁)> 𝗈𝗋 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝗏𝗂𝖽𝖾𝗈 𝗈𝖿 (𝗒𝗈𝗎𝗋 𝗌𝖾𝖺𝗋𝖼𝗁)> 𝖺𝗇𝖽 𝗆𝗈𝗋𝖾... 𝖺𝗌 𝗅𝗈𝗇𝗀 𝖺𝗌 𝗍𝗁𝖾𝗋𝖾'𝗌 𝗍𝗁𝖾 𝗐𝗈𝗋𝖽 ‘𝗏𝗂𝖽𝖾𝗈 𝗈𝖿’ 𝖺𝗇𝖽 𝗒𝗈𝗎 𝗌𝖾𝖺𝗋𝖼𝗁, 𝗂𝗍 𝗐𝗂𝗅𝗅 𝖺𝗎𝗍𝗈𝗆𝖺𝗍𝗂𝖼𝖺𝗅𝗅𝗒 𝗌𝖾𝗇𝖽 𝖺 𝗏𝗂𝖽𝖾𝗈

•𝖲𝖧𝖨𝖱𝖮𝖲𝖴𝖹𝖴𝖪𝖠 𝖢𝖠𝖭 𝖳𝖠𝖫𝖪.

𝖩𝗎𝗌𝗍 𝗍𝗒𝗉𝖾 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝗌𝖺𝗒 (𝗆𝖾𝗌𝗌𝖺𝗀𝖾)>.

•𝖲𝖧𝖨𝖱𝖮𝖲𝖴𝖹𝖴𝖪𝖠 𝖢𝖠𝖭 𝖲𝖤𝖭𝖣 𝖠 𝖫𝖸𝖱𝖨𝖢𝖲.

𝖩𝗎𝗌𝗍 𝗍𝗒𝗉𝖾 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝖼𝖺𝗇 𝗒𝗈𝗎 𝗀𝗂𝗏𝖾 𝗆𝖾 𝗍𝗁𝖾 𝗅𝗒𝗋𝗂𝖼𝗌 𝗈𝖿 (𝗌𝗈𝗇𝗀 𝗇𝖺𝗆𝖾)> 𝗈𝗋 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝗀𝗂𝗏𝖾 𝗆𝖾 𝖺 𝗅𝗒𝗋𝗂𝖼𝗌 𝗈𝖿 (𝗌𝗈𝗇𝗀 𝗇𝖺𝗆𝖾)> 𝖺𝗌 𝗅𝗈𝗇𝗀 𝖺𝗌 𝗍𝗁𝖾𝗋𝖾'𝗌 𝖺 𝗐𝗈𝗋𝖽 ‘𝗅𝗒𝗋𝗂𝖼𝗌 𝗈𝖿’ 𝖺𝗇𝖽 𝗍𝗁𝖾 𝗌𝗈𝗇𝗀 𝗇𝖺𝗆𝖾 𝗂𝗍 𝗐𝗂𝗅𝗅 𝖻𝖾 𝖺𝗎𝗍𝗈𝗆𝖺𝗍𝗂𝖼𝖺𝗅𝗅𝗒 𝖽𝖾𝗍𝖾𝖼𝗍𝖾𝖽.

•𝖲𝖧𝖨𝖱𝖮𝖲𝖴𝖹𝖴𝖪𝖠 𝖢𝖠𝖭 𝖣𝖮𝖶𝖭𝖫𝖮𝖠𝖣 𝖳𝖨𝖪𝖳𝖮𝖪 𝖵𝖨𝖣𝖤𝖮𝖲 𝖴𝖲𝖨𝖭𝖦 𝖫𝖨𝖭𝖪

𝖩𝗎𝗌𝗍 𝗍𝗒𝗉𝖾 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝖼𝖺𝗇 𝗒𝗈𝗎 𝖽𝗈𝗐𝗇𝗅𝗈𝖺𝖽 𝗍𝗁𝗂𝗌 𝗍𝗂𝗄𝗍𝗈𝗄 𝗅𝗂𝗇𝗄 (𝖺𝗇𝖽 𝗍𝗂𝗄𝗍𝗈𝗄 𝗒𝗈𝗎𝗋 𝗅𝗂𝗇𝗄)> 𝗈𝗋 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝖽𝗈𝗐𝗇𝗅𝗈𝖺𝖽 𝗍𝗁𝗂𝗌 𝗍𝗂𝗄𝗍𝗈𝗄 𝗅𝗂𝗇𝗄 (𝗒𝗈𝗎𝗋 𝗍𝗂𝗄𝗍𝗈𝗄 𝗅𝗂𝗇𝗄)>

•𝖲𝖧𝖨𝖱𝖮𝖲𝖴𝖹𝖴𝖪𝖠 𝖢𝖠𝖭 𝖲𝖤𝖭𝖣 𝖠 𝖳𝖨𝖪𝖳𝖮𝖪 𝖵𝖨𝖣𝖤𝖮

𝖩𝗎𝗌𝗍 𝗍𝗒𝗉𝖾 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝗌𝖾𝗇𝖽 𝗍𝗁𝖾 𝗍𝗂𝗄𝗍𝗈𝗄 𝗏𝗂𝖽𝖾𝗈 𝗈𝖿 (𝗒𝗈𝗎𝗋 𝗌𝖾𝖺𝗋𝖼𝗁)> 𝗈𝗋 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝗌𝖾𝗇𝖽 𝗍𝗁𝖾 𝗍𝗂𝗄𝗍𝗈𝗄 𝗏𝗂𝖽𝖾𝗈 𝗈𝖿 (𝗒𝗈𝗎𝗋 𝗌𝖾𝖺𝗋𝖼𝗁)> 𝗈𝗋 <𝗌𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺 𝗌𝖾𝗇𝖽 𝖺 𝗍𝗂𝗄𝗍𝗈𝗄 𝗏𝗂𝖽𝖾𝗈 𝗈𝖿 (𝗒𝗈𝗎𝗋 𝗌𝖾𝖺𝗋𝖼𝗁)>

𝖣𝗈 𝗒𝗈𝗎 𝗁𝖺𝗏𝖾 𝖺𝗇𝗒 𝗊𝗎𝖾𝗌𝗍𝗂𝗈𝗇𝗌? 𝗃𝗎𝗌𝗍 𝖼𝗈𝗇𝗍𝖺𝖼𝗍 𝗍𝗁𝖾 𝖺𝖽𝗆𝗂𝗇 𝗈𝖿 𝖻𝗈𝗍 𝗍𝗒𝗉𝖾 <(𝗉𝗋𝖾𝖿𝗂𝗑)𝖺𝖽𝗆𝗂𝗇 𝗅𝗂𝗌𝗍> 𝗍𝗈 𝗏𝗂𝖾𝗐 𝗍𝗁𝖾 𝗅𝗂𝗌𝗍 𝗈𝖿 𝖺𝖽𝗆𝗂𝗇.`;
    return api.sendMessage(message, event.threadID, event.messageID)
  }
if (!txt) return api.sendMessage(rand1, threadID, messageID);
 if (txt.toLowerCase().startsWith("thank you") || txt.toLowerCase().startsWith("thank")) return api.sendMessage("𝖸𝗈𝗎'𝗋𝖾 𝗐𝖾𝗅𝖼𝗈𝗆𝖾 𝗌𝖾𝗇𝗌𝖾𝗂 🤗", threadID, messageID);
  if (txt.toLowerCase() == "hi" || txt.toLowerCase() == "hello" || txt.toLowerCase() == "hey" || txt.toLowerCase() == "yo" || txt.toLowerCase() == "hai") return api.sendMessage(rand1, threadID, messageID);
  if (txt.toLowerCase().includes("who created you") || txt.toLowerCase().includes("who's your master") || txt.toLowerCase().includes("who create you") || txt.toLowerCase().includes("who's your creator")) return api.sendMessage("𝖨'𝗆 𝖲𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺, 𝗆𝗒 𝗆𝖺𝗌𝗍𝖾𝗋 𝗂𝗌 𝖢𝗅𝖺𝗋𝗄 𝖲𝗁𝗂𝗋𝗈𝗌𝗎𝗓𝗎𝗄𝖺.", event.threadID, event.messageID);
  if (txt.toLowerCase().includes("who is Clark Shirosuzuka") || txt.toLowerCase().includes("who is Clark")) return api.sendMessage("𝖧𝖾 𝗂𝗌 𝗆𝗒 𝗆𝖺𝗌𝗍𝖾𝗋", threadID, messageID);
if (txt.startsWith("can you download this facebook video") || txt.includes("facebook video") || txt.includes("https://facebook.com") || txt.includes("https://www.facebook.com/") || txt.toLowerCase().includes("fb video")){
  api.sendMessage("𝖲𝗎𝗋𝖾 𝗌𝖾𝗇𝗌𝖾𝗂 𝗀𝗂𝗏𝖾 𝗆𝖾 𝖺 𝗌𝖾𝖼𝗈𝗇𝖽 𝗍𝗈 𝖽𝗈𝗐𝗇𝗅𝗈𝖺𝖽 𝗍𝗁𝖾 𝗏𝗂𝖽𝖾𝗈 😊.", threadID, messageID);
  const regex = /https:\/\/www\.facebook\.com\/\S+/;
const match = txt.match(regex);
const url = match ? match[0] : null;
  if (!match) return api.sendMessage("ℹ️ | 𝖲𝖾𝗇𝗌𝖾𝗂, 𝗉𝗅𝖾𝖺𝗌𝖾 𝗉𝗋𝗈𝗏𝗂𝖽𝖾 𝖺 𝗏𝖺𝗅𝗂𝖽 𝖴𝖱𝖫", threadID, messageID)
  try {
  const result = await getFBInfo(url)
    //api.sendMessage(encodeURI(result.sd), threadID, messageID);
  let vid = (await axios.get(encodeURI(result.sd),{ responseType:'arraybuffer'} )).data;
  fs.writeFileSync(fbvid, Buffer.from(vid, "utf-8"));
  return api.sendMessage({body: "✅ | 𝖲𝖾𝗇𝗌𝖾𝗂, 𝗁𝖾𝗋𝖾'𝗌 𝗒𝗈𝗎𝗋 𝗏𝗂𝖽𝖾𝗈 𝗎𝗌𝖾𝗋.", attachment: fs.createReadStream(fbvid)}, event.threadID, () => fs.unlinkSync(fbvid), event.messageID)
  } catch (e){
    return api.sendMessage("❎ | 𝖦𝗈𝗆𝖾𝗇 𝗌𝖾𝗇𝗌𝖾𝗂, 𝖻𝗎𝗍 𝖨 𝖼𝖺𝗇'𝗍 𝖽𝗈𝗐𝗇𝗅𝗈𝖺𝖽 𝗍𝗁𝖺𝗍 𝗏𝗂𝖽𝖾𝗈 😔", threadID, messageID)
    }
  }
if (txt.toLowerCase().startsWith("can you sing") || txt.toLowerCase().includes("sing") || txt.toLowerCase().startsWith("sing")){
  const path = `${__dirname}/cache/song.mp3`;
const regex = /sing\s(.+)/;
var msg = ""
const match = txt.match(regex);
const wordsAfterSing = match ? match[1].split(" ") : [];
for (let i of wordsAfterSing){
  msg += i+" "
}
  if (match){
  try {
      const random = Math.floor(Math.random() * 3) + 1;
  const rest = await usetube.searchVideo(msg);
var ok = rest.videos[random]
  const stream = ytdl("https://www.youtube.com/watch?v="+ok.id, { filter: 'audioonly' });
    api.sendMessage("𝖸𝖾𝗉 𝗒𝖾𝗉 𝖲𝗎𝗋𝖾 𝗃𝗎𝗌𝗍 𝗉𝗅𝖾𝖺𝗌𝖾 𝗐𝖺𝗂𝗍...", event.threadID, event.messageID);
    const res = await axios.get('https://lyrist.vercel.app/api/'+msg);
const { lyrics, artist, title } = res.data;
stream.pipe(fs.createWriteStream(path)).on('finish', () => {
        api.sendMessage({body: `𝖧𝖾𝗋𝖾'𝗌 𝗒𝗈𝗎𝗋 𝗋𝖾𝗊𝗎𝖾𝗌𝗍 𝗎𝗌𝖾𝗋, 𝗌𝗂𝗇𝗀 𝗐𝗂𝗍𝗁 𝗆𝖾!😊\n\n𝖧𝖾𝗋𝖾'𝗌 𝗍𝗁𝖾 𝗅𝗒𝗋𝗂𝖼𝗌 𝗈𝖿 ${title} 𝖻𝗒 ${artist}\n\n${lyrics}`, attachment: fs.createReadStream(path)}, event.threadID, () => fs.unlinkSync(path), event.messageID);
      });
} catch (e){
    return api.sendMessage("𝖮𝗁 𝖨'𝗆 𝖲𝗈𝗋𝗋𝗒  𝖨 𝗍𝗁𝗂𝗇𝗄 𝖨 𝖿𝗈𝗋𝗀𝗈𝗍 𝗍𝗁𝖾 𝗅𝗒𝗋𝗂𝖼𝗌 😅", event.threadID, event.messageID)
   } 
  }
}
if (txt.toLowerCase().startsWith("can you send a video of") || txt.toLowerCase().includes("send a video of") || txt.toLowerCase().startsWith("video of") || txt.toLowerCase().startsWith("can you send me a video of")){
const regex = /of\s(.+)/i;
var msg = " "
const match = txt.match(regex);
const wordsAfterSing = match ? match[1].split(" ") : [];
  if (match){
for (let i of wordsAfterSing){
  msg += i+" "
}
  try {
      const random = Math.floor(Math.random() * 3) + 1;
  const res = await usetube.searchVideo(msg);
var ok = res.videos[random]
  const stream = ytdl("https://www.youtube.com/watch?v="+ok.id, { filter: 'audioandvideo',
  quality: 'highestvideo',
  format: 'mp4', });
    api.sendMessage("𝖮𝗄𝖺𝗒 𝖭𝗈𝗍𝖾𝖽 𝖴𝗌𝖾𝗋 𝖩𝗎𝗌𝗍 𝖯𝗅𝖾𝖺𝗌𝖾 𝖶𝖺𝗂𝗍 😘...", event.threadID, event.messageID);
      const path = `${__dirname}/cache/song.mp4`; stream.pipe(fs.createWriteStream(path)).on('finish', () => {
        api.sendMessage({body: "𝖧𝖾𝗋𝖾'𝗌 𝗒𝗈𝗎𝗋 𝗋𝖾𝗊𝗎𝖾𝗌𝗍! 𝖴𝗌𝖾𝗋 𝗍𝗁𝖾 𝗍𝗂𝗍𝗅𝖾 𝗈𝖿 𝗍𝗁𝖺𝗍 𝗏𝗂𝖽𝖾𝗈 𝗂𝗌 ["+ok.title+"]\n𝖤𝗇𝗃𝗈𝗒 𝗐𝖺𝗍𝗁𝗂𝗇𝗀 🥰", attachment: fs.createReadStream(path)}, event.threadID, () => fs.unlinkSync(path), event.messageID);
      });
} catch (e){
    return api.sendMessage("𝖲𝗈𝗋𝗋𝗒 𝗆𝖺𝗌𝗍𝖾𝗋 𝗌𝗈𝗋𝗋𝗒 𝖻𝗎𝗍 𝖨 𝗍𝗁𝗂𝗇𝗄 𝖨 𝖿𝗈𝗋𝗀𝗈𝗍 𝗍𝗁𝖾 𝗅𝗒𝗋𝗂𝖼𝗌 😅", event.threadID, event.messageID)
    }
  }
} else if (txt.toLowerCase().startsWith("send an image of") || txt.toLowerCase().includes("image of") || txt.toLowerCase().startsWith("image")){
const regex = /of\s(.+)/;
var msg = ""
const match = txt.match(regex);
const wordsAfterSing = match ? match[1].split(" ") : [];
for (let i of wordsAfterSing){
  msg += i+" "
}
  if (match){
    api.sendMessage("Sure no problem just wait....", event.threadID, event.messageID)
  let result = await google.image(txt, {safe: false});
  if(result.length === 0) {
    api.sendMessage(`Oh I'm sorry but I can't find the image you want to search.`, event.threadID, event.messageID)
    return;
  }
  let streams = [];
  let counter = 0;
  console.log(result)
    for(let image of result) {
    // Only show 6 images
    if(counter >= 6)
      break;

    console.log(`${counter} : ${image.url}`);

    // Ignore urls that does not ends with .jpg or .png
    let url = image.url;
    if(!url.endsWith(".jpg") && !url.endsWith(".png"))
      continue;

   let path = __dirname + `/cache/search-image-${counter}.jpg`;
    let hasError = false;
    await cloudscraper.get({uri: url, encoding: null})
      .then((buffer) => fs.writeFileSync(path, buffer))
      .catch((error) => {
        console.log(error)
        hasError = true;
      });

    if(hasError)
      continue;

    console.log(`Pushed to streams : ${path}`) ;
    streams.push(fs.createReadStream(path).on("end", async () => {
      if(fs.existsSync(path)) {
        fs.unlink(path, (err) => {
          if(err) return console.log(err);

          console.log(`Deleted file : ${path}`);
        });
      }
    }));

    counter += 1;
  }

  api.sendMessage("Finding the image...", event.threadID, event.messageID)

  let msg = {
    body: `Hello There User here it is 🫡.`,
    attachment: streams
  };

  api.sendMessage(msg, event.threadID, event.messageID);
   }
} if (txt.toLowerCase().startsWith("say")){
  const phrase = txt.replace(/\bsay\b/, "");
  if (phrase){
    const vm = (await axios.get(`https://translate.google.com/translate_tts?ie=UTF-8&q=${encodeURIComponent(phrase)}&tl=tl&client=tw-ob`, {
  responseType: "arraybuffer"
})
).data
fs.writeFileSync(audio, Buffer.from(vm, "utf-8"));
  return api.sendMessage({attachment: fs.createReadStream(audio)}, event.threadID, event.messageID)
 }
} 
if (txt.toLowerCase().startsWith("can you give me a lyrics of") || txt.toLowerCase().includes("lyrics of") || txt.toLowerCase().startsWith("lyrics") || txt.toLowerCase().includes("lyric")){
const regex = /of\s(.+)/;
const match = txt.match(regex);
  if (match){
    try {
const wordsAfterOf = match ? match[1] : " ";
    api.sendMessage("Yep Noted just please wait a second :) ...", threadID, messageID);
    const res = await axios.get('https://lyrist.vercel.app/api/'+wordAfterOf);
const { image, lyrics, artist, title } = res.data;
    let ly = __dirname+"/cache/lyrics.png";
    let ly1 = (await axios.get(image, {
    responseType: "arraybuffer"
  })).data;
  fs.writeFileSync(ly, Buffer.from(ly, "utf-8"));
    return api.sendMessage({body: `Here's your request User 😊\n\nLyrics of ${title} by ${artist}\n\n${lyrics}`, attachment: fs.createReadStream(ly)}, threadID, () => fs.unlinkSync(ly), messageID)
  } catch (e){
      console.log(e)
          return api.sendMessage("Can't find lyrics", threadID, messageID)
  }
  }
} 
  if(txt.toLowerCase().startsWith("can you download this tiktok link") || txt.toLowerCase().startsWith("download this tiktok link")){
const matchResult = txt.match(/link(.*)/);
    if (!matchResult) return api.sendMessage("Invalid syntax", threadID, messageID);

if (matchResult && matchResult.length > 1) {
const url = matchResult[1].trim();
   api.sendMessage("Okay Noted Just please wait...", threadID, messageID);
// console.log(textAfterTikTok);
  try {
    const rest = await axios.get("https://free-api.ainz-sama101.repl.co/tiktok/tiktokdl?link="+url);
    var vid = rest.data.wmplay
    var title = rest.data.title
      const re = (await axios.get(encodeURI(vid), {responseType: "arraybuffer"}));
      fs.writeFileSync(tikvid, Buffer.from(re, "utf-8"));
return api.sendMessage({body: "Here's your request user 😊\nTitle: "+title, attachment: fs.createReadStream(tikvid)}, threadID, messageID)
  } catch (tikerr){
 api.sendMessage("Sorry I cant :(", threadID, messageID);
    return api.sendMessage(tikerr.message, threadID)
  }
}
  }
  if (txt.toLowerCase().startsWith("can you send a tiktok video of") || txt.toLowerCase().startsWith("send a tiktok video of") || txt.toLowerCase().includes("tiktok video of")){
    const matchResult = txt.match(/of(.*)/);
    if (!matchResult) return api.sendMessage("Invalid syntax", threadID, messageID);

if (matchResult && matchResult.length > 1) {
const search = matchResult[1].trim();
   api.sendMessage("Yep noted just please wait...", threadID, messageID);
// console.log(textAfterTikTok);
  try {
    const rest = await axios.get(" https://free-api.ainz-sama101.repl.co/tiktok/tiksearch?q="+search)
    var vid = rest.data.play
    var title = rest.data.title
      const re = (await axios.get(encodeURI(vid), {responseType: "arraybuffer"})).data;
      fs.writeFileSync(tikvid, Buffer.from(re, "utf-8"));
return api.sendMessage({body: "Here's your request user 😊\nTitle: "+title, attachment: fs.createReadStream(tikvid)}, threadID, messageID)
  } catch (tikerr){
 api.sendMessage("Sorry I cant :(", threadID, messageID);
    return api.sendMessage(tikerr.message, threadID)
  }
}
  }
  if (txt.toLowerCase().startsWith("what is the meaning of") || txt.toLowerCase().startsWith("meaning of") || txt.toLowerCase().includes('meaning of')){
    var c = 0
    const match = txt.match(/of(.*)/)
    if (!match) return api.sendMessage("Invalid syntax", threadID, messageID);
    try {
      const wordsAfterOf = match ? match[1] : "";
    const response = await google.search('Meaning of '+wordsAfterOf);
var ok = ""
for (let i of response.dictionary.definitions){
  c += 1
ok += c+". "+i+"\n"
}

/*console.log(response.dictionary)
console.log(`Word: ${response.dictionary.word}\nDefinition: ${ok}`);*/
   return api.sendMessage(`📃𝚆𝙾𝚁𝙳: “${response.dictionary.word}”\n\n📄𝙳𝙴𝙵𝙸𝙽𝙸𝚃𝙸𝙾𝙽:\n\n${ok}`, threadID, messageID);
     api.sendMessage({attachment: fs.createReadStream(audio)}, threadID, () => fs.unlinkSync(audio), messageID)
  } catch (e){
      console.log(e.message)
      api.sendMessage("Oh I'm Sorry I can't find the meaning.", threadID)// of\s(.+)/;
  }
  }
  }